// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: notification.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotiService_GetNoti_FullMethodName = "/mygrpcservice.NotiService/GetNoti"
)

// NotiServiceClient is the client API for NotiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotiServiceClient interface {
	GetNoti(ctx context.Context, in *Noti, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type notiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotiServiceClient(cc grpc.ClientConnInterface) NotiServiceClient {
	return &notiServiceClient{cc}
}

func (c *notiServiceClient) GetNoti(ctx context.Context, in *Noti, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NotiService_GetNoti_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotiServiceServer is the server API for NotiService service.
// All implementations must embed UnimplementedNotiServiceServer
// for forward compatibility
type NotiServiceServer interface {
	GetNoti(context.Context, *Noti) (*emptypb.Empty, error)
	mustEmbedUnimplementedNotiServiceServer()
}

// UnimplementedNotiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotiServiceServer struct {
}

func (UnimplementedNotiServiceServer) GetNoti(context.Context, *Noti) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoti not implemented")
}
func (UnimplementedNotiServiceServer) mustEmbedUnimplementedNotiServiceServer() {}

// UnsafeNotiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotiServiceServer will
// result in compilation errors.
type UnsafeNotiServiceServer interface {
	mustEmbedUnimplementedNotiServiceServer()
}

func RegisterNotiServiceServer(s grpc.ServiceRegistrar, srv NotiServiceServer) {
	s.RegisterService(&NotiService_ServiceDesc, srv)
}

func _NotiService_GetNoti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noti)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiServiceServer).GetNoti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotiService_GetNoti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiServiceServer).GetNoti(ctx, req.(*Noti))
	}
	return interceptor(ctx, in, info, handler)
}

// NotiService_ServiceDesc is the grpc.ServiceDesc for NotiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mygrpcservice.NotiService",
	HandlerType: (*NotiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNoti",
			Handler:    _NotiService_GetNoti_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}
